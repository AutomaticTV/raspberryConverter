package services

import (
  "os/exec"
  "fmt"
  "strings"
  "errors"
  "regexp"
)

type Network struct {
  Mode string
  IP string
  Netmask string
  Gateway string
  DNS1 string
  DNS2 string
}

var staticIPDelimiter = "#STATIC_IP_ENABLED_BY_RASPBERRY_CONVERTER"

func SetNetworkConfig(config Network) ( error) {
  if config.Mode == "DHCP" {
    return setDHCP(config)
  }
  return setStatic(config)
  // sudo systemctl restart dhcpcd
}

func setDHCP(config Network) (error) {
  return nil
}

func setStatic(config Network) (error) {
  return nil
  // edit /etc/dhcpcd.conf
  // like:
  // #STATIC_IP_ENABLED_BY_RASPBERRY_CONVERTER
  // interface eth0
  // static ip_address=192.168.1.42/24
  // static routers=192.168.1.1
  // static domain_name_servers=8.8.8.8

}

func GetNetworkConfig() (interface{}, error) {
  // REMOVE!!
  exec.Command("ls").CombinedOutput()

  ipRouteCommand, err := exec.Command("ip", "route").CombinedOutput()
  if err != nil { return networkError(err) }
//   ipRouteCommand := `default via 192.168.1.1 dev eth0 src 192.168.1.42 metric 202
// 192.168.1.0/24 dev eth0 proto kernel scope link src 192.168.1.42 metric 202`

  resolvCommand, err := exec.Command("cat", "/etc/resolv.conf").CombinedOutput()
  if err != nil { return networkError(err) }
//   resolvCommand := `# Generated by resolvconf
// domain lan
// nameserver 192.168.1.1
// nameserver fd4c:61c9:2560::1`
  resolvSplited := regexp.MustCompile("[\n ]").Split(string(resolvCommand), -1)

  ifconfigCommand, err := exec.Command("ifconfig", "eth0").CombinedOutput()
  if err != nil { return networkError(err) }
  // ifconfigCommand := `eth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
  //       inet 192.168.1.42  netmask 255.255.255.0  broadcast 192.168.1.255
  //       inet6 fd4c:61c9:2560:0:c95e:de0f:9df8:183c  prefixlen 64  scopeid 0x0<global>
  //       inet6 fe80::6d7e:3fe:34d6:84ac  prefixlen 64  scopeid 0x20<link>
  //       ether b8:27:eb:ab:58:30  txqueuelen 1000  (Ethernet)
  //       RX packets 208245  bytes 280302856 (267.3 MiB)
  //       RX errors 0  dropped 1  overruns 0  frame 0
  //       TX packets 59295  bytes 10612925 (10.1 MiB)
  //       TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0`
  ifconfigSplited := regexp.MustCompile("[\n ]").Split(string(ifconfigCommand), -1)


  Mode := "Static"
  if isDHCP() {
    Mode = "DHCP"
  }
  IP := ""
  Gateway := strings.Split(string(ipRouteCommand), " ")[2]
  Netmask := ""
  DNS1 := ""
  DNS2 := ""

  for i, element := range ifconfigSplited {
      if isIP(element) && i > 0 &&  ifconfigSplited[i -1] == "inet" {
        IP = element
      }
      if isIP(element) && i > 0 &&  ifconfigSplited[i -1] == "netmask" {
        Netmask = element
      }
  }

  for i, element := range resolvSplited {
      if isIP(element) && i > 0 &&  resolvSplited[i -1] == "nameserver" {
        fmt.Println("in check", resolvSplited[i -1])
        if DNS1 == "" {
          fmt.Println("dns 1", element)
          DNS1 = element
        } else if DNS2 == "" {
          fmt.Println("dns 2", element)
          DNS2 = element
        }
      }
  }
  if DNS2 == "" { DNS2 = DNS1 }

  // var network Network
  network := Network{
    Mode: string(Mode),
    IP: IP,
    Netmask: string(Netmask),
    Gateway: Gateway,
    DNS1: DNS1,
    DNS2: DNS2,
  }
  return &network, nil
}

func networkError(err error) (Network, error) {
  fmt.Println(err)
  return Network{}, errors.New("Error geting network configuration.")
}

func isIP(str string) bool {
  isCorrect, err := regexp.MatchString("^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$" ,str)
  if err != nil { return false }
  return isCorrect
}

func isDHCP() bool {
  dhcpCommand, err := exec.Command("cat", "/etc/dhcpcd.conf").CombinedOutput()
  if err != nil { return true }
  return !strings.Contains(string(dhcpCommand), staticIPDelimiter)
}
